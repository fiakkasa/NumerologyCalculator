@using NumerologyCalculator.Shared
@using NumerologyCalculator.Models

@inherits TestContext

@code
{
    private IServiceCollection AddServices() => 
        Services.AddSingleton(new NumerologyUiConfig(MaxInputChars: 10));

    private (IRenderedComponent<SearchInput> cut, IElement input) Base(Action<ComponentParameterCollectionBuilder<SearchInput>>? parameterBuilder = default)
    {
        AddServices();
        var cut = RenderComponent<SearchInput>(parameterBuilder);
        var input = cut.Find("input.nc-search-input");

        return (cut, input);
    }

    private (IRenderedComponent<SearchInput> cut, IElement input) BaseTest()
    {
       var (cut, input) = Base();

        Assert.Null(input.Attributes["value"]?.Value);
        Assert.Equal("10", input.Attributes["maxlength"]?.Value);
        Assert.Null(input.Attributes["autofocus"]?.Value);
        Assert.Equal(string.Empty, cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Empty(cut.FindAll("span.nc-loading"));
        Assert.Equal("0", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);

        return (cut, input);
    }

    [Fact]
    public void SearchInput_Initial_Render_With_No_Inputs_Renders_Correctly() => BaseTest();

    [Fact]
    public void SearchInput_Initial_Render_With_Text_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("Hello", input.Attributes["value"]?.Value);
        Assert.Equal("10", input.Attributes["maxlength"]?.Value);
        Assert.Null(input.Attributes["autofocus"]?.Value);
        Assert.Null(cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Empty(cut.FindAll("span.nc-loading"));
        Assert.Equal("5", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);
    }

    [Fact]
    public void SearchInput_With_Text_When_Text_Is_Set_Renders_Correctly()
    {
        var (cut, input) = BaseTest();

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, "Abc"));

        Assert.Equal("Abc", input.Attributes["value"]?.Value);
        Assert.Null(cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Equal("3", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);
    }

    [Fact]
    public void SearchInput_With_Text_When_Text_Is_Set_To_Empty_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("Hello", input.Attributes["value"]?.Value);
        Assert.Equal("10", input.Attributes["maxlength"]?.Value);
        Assert.Null(input.Attributes["autofocus"]?.Value);
        Assert.Null(cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Empty(cut.FindAll("span.nc-loading"));
        Assert.Equal("5", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, string.Empty));

        Assert.Equal(string.Empty, input.Attributes["value"]?.Value);
        Assert.Equal(string.Empty, cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Equal("0", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);
    }

    [Fact]
    public void SearchInput_With_Text_When_Text_Is_Set_To_Null_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("Hello", input.Attributes["value"]?.Value);
        Assert.Equal("10", input.Attributes["maxlength"]?.Value);
        Assert.Null(input.Attributes["autofocus"]?.Value);
        Assert.Null(cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Empty(cut.FindAll("span.nc-loading"));
        Assert.Equal("5", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, null));

        Assert.Null(input.Attributes["value"]?.Value);
        Assert.Equal(string.Empty, cut.Find("button.nc-clear").Attributes["disabled"]?.Value);
        Assert.Equal("0", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);
    }

    [Fact]
    public void SearchInput_Initial_Render_With_FocusOnLoad_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.FocusOnLoad, true));

        Assert.Equal(string.Empty, input.Attributes["autofocus"]?.Value);
    }

    [Fact]
    public void SearchInput_Initial_Render_With_Loading_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.Loading, true));

        Assert.Single(cut.FindAll("span.nc-loading"));
    }

    [Fact]
    public void SearchInput_When_Loading_Is_Set_Renders_Correctly()
    {
        var (cut, input) = BaseTest();

        cut.SetParametersAndRender(p => p.Add(ps => ps.Loading, true));

        Assert.Single(cut.FindAll("span.nc-loading"));
    }

    [Fact]
    public async Task SearchInput_With_Text_When_Clear_Is_Clicked_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.Text, "Hello"));  
        var clearButton = cut.Find("button.nc-clear");

        Assert.Equal("Hello", input.Attributes["value"]?.Value);
        Assert.Equal("10", input.Attributes["maxlength"]?.Value);
        Assert.Null(input.Attributes["autofocus"]?.Value);
        Assert.Null(clearButton.Attributes["disabled"]?.Value);
        Assert.Empty(cut.FindAll("span.nc-loading"));
        Assert.Equal("5", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);

        await clearButton.ClickAsync(null!);

        Assert.Equal(string.Empty, input.Attributes["value"]?.Value);
        Assert.Equal(string.Empty, clearButton.Attributes["disabled"]?.Value);
        Assert.Equal("0", cut.Find("span.nc-count").TextContent);
    }

    [Fact]
    public async Task SearchInput_With_Text_When_Input_Value_Is_Set_Renders_Correctly()
    {
        var (cut, input) = Base(p => p.Add(ps => ps.Text, "Hello"));  
        var clearButton = cut.Find("button.nc-clear");

        Assert.Equal("Hello", input.Attributes["value"]?.Value);
        Assert.Equal("10", input.Attributes["maxlength"]?.Value);
        Assert.Null(input.Attributes["autofocus"]?.Value);
        Assert.Null(clearButton.Attributes["disabled"]?.Value);
        Assert.Empty(cut.FindAll("span.nc-loading"));
        Assert.Equal("5", cut.Find("span.nc-count").TextContent);
        Assert.Equal("/", cut.Find("span.nc-separator").TextContent);
        Assert.Equal("10", cut.Find("span.nc-max-chars").TextContent);

        await input.InputAsync(new ChangeEventArgs { Value = string.Empty });

        Assert.Equal(string.Empty, input.Attributes["value"]?.Value);
        Assert.Equal(string.Empty, clearButton.Attributes["disabled"]?.Value);
        Assert.Equal("0", cut.Find("span.nc-count").TextContent);
    }
}
