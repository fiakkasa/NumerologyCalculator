@using NumerologyCalculator.Shared
@using NumerologyCalculator.Interfaces
@using NumerologyCalculator.Models

@inherits TestContext

@code
{
    private IServiceCollection AddServices(bool validUrls = false, string sequence = "", string sum = "")
    {
        var mockService = new Mock<INumerologyLinksService>();

        if (validUrls)
        {
            mockService
                .Setup(m => m.IsNumerologyLinkEligible(sequence, out sequence))
                .Returns(true);

            mockService
                .Setup(m => m.IsNumerologyLinkEligible(sum, out sum))
                .Returns(true);

            mockService
                .Setup(m => m.GetNumerologyUrl(sequence))
                .Returns("/" + sequence);

            mockService
                .Setup(m => m.GetNumerologyUrl(sum))
                .Returns("/" + sum);
        }
        else
        {
            mockService
                .Setup(m => m.IsNumerologyLinkEligible(It.IsAny<string?>(), out sum))
                .Returns(false);
        }

        return Services.AddSingleton(mockService.Object);
    }

    [Fact]
    public void CalculationStepsInitialRenderWithNoInputsRendersCorrectly()
    {
        AddServices();
        Render(@<CalculationSteps />).MarkupMatches(string.Empty);
    }

     [Fact]
    public void CalculationStepsInitialRenderWithEmptyStepsRendersCorrectly()
    {
        AddServices();
        var collection = new List<CalculationStep>();
        Render(@<CalculationSteps Steps="collection" />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationStepsInitialRenderWithNullStepsRendersCorrectly()
    {
        AddServices();
        Render(@<CalculationSteps Steps="null" />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationStepsInitialRenderWithNonLinkStepsRendersCorrectly()
    {
        AddServices(sum: "4");
        var collection = new List<CalculationStep>
        {
            new("1 + 1 + 1 + 1", "4", 1, "1111")
        };
        var cut = Render(@<CalculationSteps Steps="collection" />);

        Assert.Equal("1.", cut.Find("div.nc-count").TextContent);
        Assert.Equal("1 + 1 + 1 + 1", cut.Find("div.nc-equation").TextContent);
        Assert.Equal("=", cut.Find("div.nc-equation-symbol").TextContent);
        Assert.Equal("4", cut.Find("div.nc-sum").TextContent);
        Assert.Empty(cut.FindAll("a.nc-equation"));
        Assert.Empty(cut.FindAll("a.nc-sum"));
    }

    [Fact]
    public void CalculationStepsWithNonLinkStepsWhenStepsSetToNullRendersCorrectly()
    {
        AddServices(sum: "4");
        var cut = RenderComponent<CalculationSteps>(p => 
            p.Add(ps => ps.Steps, new List<CalculationStep>
            {
                new("1 + 1 + 1 + 1", "4", 1, "1111")
            })
        );

        Assert.Equal("1.", cut.Find("div.nc-count").TextContent);
        Assert.Equal("1 + 1 + 1 + 1", cut.Find("div.nc-equation").TextContent);
        Assert.Equal("=", cut.Find("div.nc-equation-symbol").TextContent);
        Assert.Equal("4", cut.Find("div.nc-sum").TextContent);
        Assert.Empty(cut.FindAll("a.nc-equation"));
        Assert.Empty(cut.FindAll("a.nc-sum"));

        cut.SetParametersAndRender(p => p.Add(ps => ps.Steps, null));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationStepsWithNonLinkStepsWhenStepsSetToEmptyRendersCorrectly()
    {
        AddServices(sum: "4");
        var cut = RenderComponent<CalculationSteps>(p => 
            p.Add(ps => ps.Steps, new List<CalculationStep>
            {
                new("1 + 1 + 1 + 1", "4", 1, "1111")
            })
        );

        Assert.Equal("1.", cut.Find("div.nc-count").TextContent);
        Assert.Equal("1 + 1 + 1 + 1", cut.Find("div.nc-equation").TextContent);
        Assert.Equal("=", cut.Find("div.nc-equation-symbol").TextContent);
        Assert.Equal("4", cut.Find("div.nc-sum").TextContent);
        Assert.Empty(cut.FindAll("a.nc-equation"));
        Assert.Empty(cut.FindAll("a.nc-sum"));

        cut.SetParametersAndRender(p => p.Add(ps => ps.Steps, new List<CalculationStep>()));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationStepsInitialRenderWithLinkStepsRendersCorrectly()
    {
        AddServices(true, "111", "3");
        var collection = new List<CalculationStep>
        {
            new("1 + 1 + 1", "3", 1, "111")
        };
        var cut = Render(@<CalculationSteps Steps="collection" />);

        Assert.Equal("1.", cut.Find("div.nc-count").TextContent);
        Assert.Equal("1 + 1 + 1", cut.Find("a.nc-equation[href=\"/111\"][target=\"_blank\"]").TextContent);
        Assert.Equal("=", cut.Find("div.nc-equation-symbol").TextContent);
        Assert.Equal("3", cut.Find("a.nc-sum[href=\"/3\"][target=\"_blank\"]").TextContent);
        Assert.Empty(cut.FindAll("div.nc-equation"));
        Assert.Empty(cut.FindAll("div.nc-sum"));
    }
}
