@using NumerologyCalculator.Shared
@using NumerologyCalculator.Interfaces

@inherits TestContext

@code
{
    private IServiceCollection AddServices(bool validUrls = false, string result = "")
    {
        var mockService = new Mock<INumerologyLinksService>();

        if (validUrls)
        {
            mockService
                .Setup(m => m.IsNumerologyLinkEligible(It.IsAny<string?>(), out result))
                .Returns(true);

            mockService
                .Setup(m => m.GetNumerologyUrl(It.IsAny<string>()))
                .Returns("/123");
        }
        else
        {
            mockService
                .Setup(m => m.IsNumerologyLinkEligible(It.IsAny<string?>(), out result))
                .Returns(false);
        }

        return Services.AddSingleton(mockService.Object);
    }

    [Fact]
    public void CalculationResultComponentRendersTextCorrectly()
    {
        AddServices(result: "12345");

        var cut = Render(@<CalculationResult Text="12345" />);

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Throws<ElementNotFoundException>(() => cut.Find("a.nc-result"));
    }

    [Fact]
    public void CalculationResultComponentRendersUnspecifiedCorrectly()
    {
        AddServices();
        Render(@<CalculationResult />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResultComponentRendersEmptyCorrectly()
    {
        AddServices();
        Render(@<CalculationResult Text="" />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResultComponentRendersLinkCorrectly()
    {
        AddServices(true, "123");

        var cut = Render(@<CalculationResult Text="123" />);

        Assert.Equal("123", cut.Find("a.nc-result[href=\"/123\"][target=\"_blank\"]").TextContent);
        Assert.Throws<ElementNotFoundException>(() => cut.Find("div.nc-result"));
    }
}
