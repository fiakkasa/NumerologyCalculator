@using NumerologyCalculator.Shared
@using NumerologyCalculator.Interfaces

@inherits TestContext

@code
{
    private IServiceCollection AddServices(bool validUrls = false, string result = "")
    {
        var mockService = Substitute.For<INumerologyLinksService>();

        if (validUrls)
        {
            mockService
                .IsNumerologyLinkEligible(result, out Arg.Any<string>())
                .Returns(x =>
                {
                    x[1] = result;
                    return true;
                });

            mockService
                .GetNumerologyUrl(result)
                .Returns("/" + result);
        }
        else
        {
            mockService
                .IsNumerologyLinkEligible(Arg.Any<string?>(), out Arg.Any<string>())
                .Returns(x =>
                {
                    x[1] = result;
                    return false;
                });
        }

        return Services.AddSingleton(mockService);
    }

    [Fact]
    public void CalculationResult_Initial_Render_With_No_Inputs_Renders_Correctly()
    {
        AddServices();
        Render(@<CalculationResult />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResult_Initial_Render_With_Empty_Text_Renders_Correctly()
    {
        AddServices();
        Render(@<CalculationResult Text="" />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResult_Initial_Render_With_Non_Link_Text_Renders_Correctly()
    {
        AddServices(result: "12345");

        var cut = Render(@<CalculationResult Text="12345" />);

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Empty(cut.FindAll("a.nc-result"));
    }

    [Fact]
    public void CalculationResult_With_Text_When_Text_Is_Set_To_Null_Renders_Correctly()
    {
        AddServices(result: "12345");

        var cut = RenderComponent<CalculationResult>(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Empty(cut.FindAll("a.nc-result"));

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, null));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResult_With_Text_When_Text_Is_Set_ToEmpty_Renders_Correctly()
    {
        AddServices(result: "12345");

        var cut = RenderComponent<CalculationResult>(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Empty(cut.FindAll("a.nc-result"));

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, string.Empty));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResult_Initial_Render_With_Text_Link_Renders_Correctly()
    {
        AddServices(true, "123");

        var cut = Render(@<CalculationResult Text="123" />);

        Assert.Equal("123", cut.Find("a.nc-result[href=\"/123\"][target=\"_blank\"]").TextContent);
        Assert.Empty(cut.FindAll("div.nc-result"));
    }
}
