@using NumerologyCalculator.Shared
@using NumerologyCalculator.Interfaces

@inherits TestContext

@code
{
    private IServiceCollection AddServices(bool validUrls = false, string result = "")
    {
        var mockService = new Mock<INumerologyLinksService>();

        if (validUrls)
        {
            mockService
                .Setup(m => m.IsNumerologyLinkEligible(result, out result))
                .Returns(true);

            mockService
                .Setup(m => m.GetNumerologyUrl(result))
                .Returns("/" + result);
        }
        else
        {
            mockService
                .Setup(m => m.IsNumerologyLinkEligible(It.IsAny<string?>(), out result))
                .Returns(false);
        }

        return Services.AddSingleton(mockService.Object);
    }

    [Fact]
    public void CalculationResultInitialRenderWithNoInputsRendersCorrectly()
    {
        AddServices();
        Render(@<CalculationResult />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResultInitialRenderWithEmptyTextRendersCorrectly()
    {
        AddServices();
        Render(@<CalculationResult Text="" />).MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResultInitialRenderWithNonLinkTextRendersCorrectly()
    {
        AddServices(result: "12345");

        var cut = Render(@<CalculationResult Text="12345" />);

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Empty(cut.FindAll("a.nc-result"));
    }

    [Fact]
    public void CalculationResultWithTextWhenTextIsSetToNullRendersCorrectly()
    {
        AddServices(result: "12345");

        var cut = RenderComponent<CalculationResult>(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Empty(cut.FindAll("a.nc-result"));

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, null));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResultWithTextWhenTextIsSetToEmptyRendersCorrectly()
    {
        AddServices(result: "12345");

        var cut = RenderComponent<CalculationResult>(p => p.Add(ps => ps.Text, "Hello"));

        Assert.Equal("12345", cut.Find("div.nc-result").TextContent);
        Assert.Empty(cut.FindAll("a.nc-result"));

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, string.Empty));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void CalculationResultInitialRenderWithTextLinkRendersCorrectly()
    {
        AddServices(true, "123");

        var cut = Render(@<CalculationResult Text="123" />);

        Assert.Equal("123", cut.Find("a.nc-result[href=\"/123\"][target=\"_blank\"]").TextContent);
        Assert.Empty(cut.FindAll("div.nc-result"));
    }
}
