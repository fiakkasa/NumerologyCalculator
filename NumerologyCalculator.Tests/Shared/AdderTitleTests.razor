@using NumerologyCalculator.Shared
@inherits TestContext

@code
{ 
    [Fact]
    public void AdderTitle_Initial_Render_With_No_Inputs_Renders_Correctly() =>
        Render(@<AdderTitle />).MarkupMatches(string.Empty);

    [Fact]
    public void AdderTitle_Initial_Render_With_Empty_Text_Renders_Correctly() =>
        Render(@<AdderTitle Text="" />).MarkupMatches(string.Empty);

    [Fact]
    public void AdderTitle_Initial_Render_With_Null_Text_Renders_Correctly() =>
        Render(@<AdderTitle Text="@null" />).MarkupMatches(string.Empty);
    
    [Fact]
    public void AdderTitle_Initial_Render_With_Text_Renders_Correctly() =>
        Assert.Equal("Hello", Render(@<AdderTitle Text="Hello" />).Find("div.nc-title").TextContent);

    [Fact]
    public void AdderTitle_With_Text_When_Text_Is_Set_To_Null_Renders_Correctly()
    {
        var cut = RenderComponent<AdderTitle>(p => p.Add(ps => ps.Text, "Hello"));
        
        var title = cut.Find("div.nc-title");

        Assert.Equal("Hello", title.TextContent);

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, null));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void AdderTitle_With_Text_When_Text_Is_Set_To_Empty_Renders_Correctly()
    {
        var cut = RenderComponent<AdderTitle>(p => p.Add(ps => ps.Text, "Hello"));
        
        var title = cut.Find("div.nc-title");

        Assert.Equal("Hello", title.TextContent);

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, string.Empty));

        cut.MarkupMatches(string.Empty);
    }

    [Fact]
    public void AdderTitle_With_Text_When_Text_Is_Set_Renders_Correctly()
    {
        var cut = RenderComponent<AdderTitle>(p => p.Add(ps => ps.Text, "Hello"));
        
        var title = cut.Find("div.nc-title");

        Assert.Equal("Hello", title.TextContent);

        cut.SetParametersAndRender(p => p.Add(ps => ps.Text, "Abc"));

        Assert.Equal("Abc", title.TextContent);
    }
}
