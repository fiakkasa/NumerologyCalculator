@inject NumerologyLinksService numerologyLinksService
@inject NumerologyUiService numerologyUiService
@inject NumerologyUiConfig numerologyUiConfig
@inject NumerologyLetterCalculatorService numerologyLetterCalculatorService

@if (_result is { Length: > 0 })
{
    <div class="letter-adder calculator">
        <div class="lead">
            Letter Calculation
        </div>

        <div class="d-flex align-items-center flex-column flex-sm-row mt-2">
            @if (numerologyLinksService.IsNumerologyLinkEligible(_result, out var result))
            {
                <a href="@numerologyLinksService.GetNumerologyUrl(result)"
                   target="_blank"
                   class="btn flex-shrink-0 m-0 p-0 border-0">
                    <span class="px-3 text-secondary display-1 ">
                        @result
                    </span>
                </a>
            }
            else
            {
                <div class="flex-shrink-0 m-0 p-0 border-0 px-3 text-secondary display-1">
                    @result
                </div>
            }

            @if (_steps is { Count: > 0 } && _steps[0].numberOfLetters > 0)
            {
                <div class="card flex-fill m-0 mt-4 mt-sm-0 ms-sm-3">
                    <div class="card-body">
                        <ol class="m-0 ps-3 text-black-50">
                            @for (var i = 0; i < _steps.Count; i++)
                            {
                                <li class="@numerologyUiService.GetLiCalculatorEntryClass(i)">
                                    <div class="d-flex align-items-center">
                                        @if (numerologyLinksService.IsNumerologyLinkEligible(_steps[i].sequence, out var sequence))
                                        {
                                            <a href="@numerologyLinksService.GetNumerologyUrl(sequence)"
                                               target="_blank"
                                               class="btn p-1 border-0 text-secondary">
                                                @_steps[i].equation
                                            </a>
                                        }
                                        else
                                        {
                                            <div class="p-1 border-0 text-secondary">@_steps[i].equation</div>
                                        }

                                        <div class="text-success">=</div>

                                        @if (numerologyLinksService.IsNumerologyLinkEligible(_steps[i].sum, out var sum))
                                        {
                                            <a href="@numerologyLinksService.GetNumerologyUrl(sum)"
                                               target="_blank"
                                               class="btn p-1 border-0 text-secondary">
                                                <span class="text-secondary font-monospace">
                                                    @sum
                                                </span>
                                            </a>
                                        }
                                        else
                                        {
                                            <div class="p-1 border-0 text-secondary font-monospace">
                                                @sum
                                            </div>
                                        }
                                    </div>
                                </li>
                            }
                        </ol>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private string _textInput = string.Empty;
    private CancellationTokenSource _cts = new();

    private List<(string equation, string sum, int numberOfLetters, string sequence)> _steps = new();
    private string _result = string.Empty;

    [Parameter]
    public string? TextInput { get; set; }

    [Parameter]
    public EventCallback<bool> LoadingChanged { get; set; }

    private void SetTextInput(string? value)
    {
        if (value == _textInput) return;

        _textInput = numerologyUiService.NormalizeTextInput(value);
    }

    private async Task SetLoading(bool value) => await LoadingChanged.InvokeAsync(value);

    protected override async Task OnParametersSetAsync()
    {
        if (_textInput == TextInput) return;

        await SetLoading(true);

        SetTextInput(TextInput);

        _cts.Cancel();
        _cts = new();

        if (_textInput.Length == 0)
        {
            _result = string.Empty;
            _steps.Clear();

            await SetLoading(false);

            StateHasChanged();

            return;
        }

        try
        {
            await Task.Delay(numerologyUiConfig.UiInputDelay, _cts.Token);

            var (result, steps) = await numerologyLetterCalculatorService.Calculate(_textInput, _cts.Token);

            _result = result;
            _steps.Clear();
            _steps.AddRange(steps);

            await SetLoading(false);

            StateHasChanged();
        }
        catch { }
    }
}
