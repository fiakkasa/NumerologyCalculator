@inject INumerologyUiService numerologyUiService
@inject INumerologyDigitCalculatorService numerologyDigitCalculatorService

@implements IDisposable

@if (_result.Length > 0 && _steps.Count > 0)
{
    <div class="digit-adder calculator">
        <AdderTitle Text="@Title" />

        <div class="d-flex align-items-center flex-column flex-sm-row mt-2">
            <CalculationResult Text="@_result" />

            @if (_steps[0].NumberOfCharacters > 1)
            {
                <CalculationSteps Steps="_steps" />
            }
        </div>
    </div>
}

@code {
    private CancellationTokenSource _cts = new();
    private string? _text;

    private List<CalculationStep> _steps = new();
    private string _result = string.Empty;

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public EventCallback<bool> BusyChanged { get; set; }

    [Parameter]
    public EventCallback<string> ResultChanged { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (_text == Text) return;

        await BusyChanged.InvokeAsync(true);

        _text = Text;
        var text = numerologyUiService.NormalizeTextInput(Text);

        _cts.Cancel();
        _cts = new();

        if (text.Length == 0)
        {
            _result = string.Empty;
            _steps.Clear();

            await BusyChanged.InvokeAsync(false);
            await ResultChanged.InvokeAsync(_result);

            StateHasChanged();

            return;
        }

        try
        {
            await numerologyUiService.InputDelay(_cts.Token);

            var (result, steps) = await numerologyDigitCalculatorService.Calculate(text, _cts.Token);

            _result = result;
            _steps.Clear();
            _steps.AddRange(steps);

            await BusyChanged.InvokeAsync(false);
            await ResultChanged.InvokeAsync(_result);

            StateHasChanged();
        }
        catch { }
    }

    public void Dispose() => _cts.Cancel();
}
