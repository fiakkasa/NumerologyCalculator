@if (_result is { Length: > 0 })
{
    <div class="digit-adder d-flex align-items-center flex-column flex-sm-row mt-2">
        @if (IsNumerologyLinkEligible(_result, out var result))
        {
            <a href="@GetNumerologyUrl(result)"
               target="_blank"
               class="btn flex-shrink-0 m-0 p-0 border-0">
                <span class="px-3 text-secondary display-1 ">
                    @result
                </span>
            </a>
        }
        else
        {
            <div class="flex-shrink-0 m-0 p-0 border-0 px-3 text-secondary display-1">
                @result
            </div>
        }

        @if (_steps is { Count: > 1 })
        {
            <div class="card flex-fill m-0 mt-4 mt-sm-0 ms-sm-3">
                <div class="card-body">
                    <ol class="m-0 ps-3 text-black-50">
                        @for (var i = 0; i < _steps.Count; i++)
                        {
                            <li class="@GetLiClass(i)">
                                <div class="d-flex align-items-center">
                                    @if (IsNumerologyLinkEligible(_steps[i].sequence, out var sequence))
                                    {
                                        <a href="@GetNumerologyUrl(sequence)"
                                           target="_blank"
                                           class="btn p-1 border-0 text-secondary">
                                            @_steps[i].equation
                                        </a>
                                    }
                                    else
                                    {
                                        <div class="p-1 border-0 text-secondary">@_steps[i].equation</div>
                                    }

                                    <div class="text-success">=</div>

                                    @if (IsNumerologyLinkEligible(_steps[i].sum, out var sum))
                                    {
                                        <a href="@GetNumerologyUrl(sum)"
                                           target="_blank"
                                           class="btn p-1 border-0 text-secondary">
                                            <span class="text-secondary font-monospace">
                                                @sum
                                            </span>
                                        </a>
                                    }
                                    else
                                    {
                                        <div class="p-1 border-0 text-secondary font-monospace">
                                            @sum
                                        </div>
                                    }
                                </div>
                            </li>
                        }
                    </ol>
                </div>
            </div>
        }
    </div>
}

@code {
    private const int _charCodeDelta = 48;
    private int _maxChars = 1_000;
    private int _delay = 600;
    private string _textInput = string.Empty;
    private CancellationTokenSource _cts = new();

    private List<(string equation, string sum, int numberOfDigits, string sequence)> _steps = new();
    private string _result = string.Empty;

    [Parameter]
    public string? TextInput { get; set; }

    [Parameter]
    public int? MaxChars { get; set; }

    [Parameter]
    public int? Delay { get; set; }

    [Parameter]
    public EventCallback<bool> LoadingChanged { get; set; }

    private static bool IsNumerologyLinkEligible(string? value, out string result)
    {
        result = value is { } v ? v : string.Empty;

        return value is { Length: > 0 and <= 3 };
    }

    private static string GetNumerologyUrl(string value) =>
        $"https://number.academy/numerology/{value}";

    private static string GetLiClass(int i) => i > 0 ? "mt-2" : string.Empty;

    private string ComposeEquation(List<int> collection) =>
        string.Join(" + ", collection);

    private string ComposeSequence(List<int> collection) =>
        string.Join(string.Empty, collection);

    private (string result, IEnumerable<(string equation, string sum, int numberOfDigits, string sequence)> steps) Calculate(string text)
    {
        try
        {
            var steps = new List<(string equation, string sum, int numberOfDigits, string sequence)>();
            var workingCollection = text.Where(x => char.IsDigit(x)).Select(x => (int)x - _charCodeDelta).ToList();

            if (workingCollection is { Count: 0 })
                return (result: string.Empty, steps);

            var result = workingCollection.Sum().ToString();

            steps.Add(
                (
                    equation: ComposeEquation(workingCollection),
                    sum: result,
                    numberOfDigits: workingCollection.Count,
                    sequence: ComposeSequence(workingCollection)
                )
            );

            while (result is { Length: > 1 })
            {
                workingCollection = result.Select(x => (int)x - _charCodeDelta).ToList();
                result = workingCollection.Sum().ToString();

                steps.Add(
                    (
                        equation: ComposeEquation(workingCollection),
                        sum: result,
                        numberOfDigits: workingCollection.Count,
                        sequence: ComposeSequence(workingCollection)
                    )
                );
            }

            return (result, steps);

        }
        catch
        {
            return (
                result: string.Empty,
                steps: Enumerable.Empty<(string equation, string sum, int numberOfDigits, string sequence)>()
            );
        }
    }

    private void SetMaxChars(int? value)
    {
        if (value == _maxChars) return;

        if (value is { } v and > 0 and < 10_000)
        {
            _maxChars = v;
            return;
        }

        _maxChars = 1_000;
    }

    private void SetTextInput(string? value)
    {
        if (value == _textInput) return;

        if (value is { Length: > 0 } v)
        {
            _textInput = (v.Length > _maxChars) switch
            {
                true => v.Substring(0, _maxChars),
                _ => v
            };
            return;
        }

        _textInput = string.Empty;
    }

    private void SetDelay(int? value)
    {
        if (value == _delay) return;

        if (value is { } v and >= 100 and <= 1_000)
        {
            _delay = v;
            return;
        }

        _delay = 600;
    }

    private async Task SetLoading(bool value) => await LoadingChanged.InvokeAsync(value);

    protected override async Task OnParametersSetAsync()
    {
        if (_textInput == TextInput && _maxChars == MaxChars && _delay == Delay) return;

        await SetLoading(true);

        SetMaxChars(MaxChars);
        SetTextInput(TextInput);
        SetDelay(Delay);

        _cts.Cancel();
        _cts = new();

        if (_textInput.Length == 0)
        {
            _result = string.Empty;
            _steps.Clear();

            await SetLoading(false);

            StateHasChanged();

            return;
        }

        try
        {
            await Task.Delay(_delay, _cts.Token);

            await Task.Run(async () =>
            {
                var (result, steps) = Calculate(_textInput);

                _result = result;
                _steps.Clear();
                _steps.AddRange(steps);

                await SetLoading(false);

                StateHasChanged();
            }, _cts.Token);
        }
        catch { }
    }
}
