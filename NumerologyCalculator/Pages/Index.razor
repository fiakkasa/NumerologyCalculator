@page "/"
@page "/{*text}"

@inject NavigationManager navigationManager

<PageTitle>Numerology Calculator</PageTitle>

<div class="p-3">
    <div class="input-group">
        <input type="text"
               class="form-control"
               placeholder="Enter your values.."
               maxlength="@_maxChars"
               @bind:event="oninput"
               @bind:get="_textInput"
               @bind:set="OnInput"
               @ref="_textInputRef" />
        <div class="input-group-prepend">
            <button type="button"
                    class="btn btn-outline-secondary"
                    disabled="@(_textInput.Length == 0)"
                    @onclick="OnInputClear">
                <span class="oi oi-x"></span>
            </button>
        </div>
    </div>
    <i class="d-flex small text-muted mt-1">
        @if (Loading)
        {
            <span class="loading flex-shrink-0"></span>
        }
        <span class="flex-fill"></span>
        <span class="flex-shrink-0">@_textInput.Length</span>
        <span class="flex-shrink-0">/</span>
        <span class="flex-shrink-0">@_maxChars</span>
    </i>

    <DigitAdder MaxChars="@_maxChars"
                TextInput="@_textInput"
                Delay="Consts.UiInputDelay"
                LoadingChanged="v => _digitAdderLoading = v" />
</div>

@code {
    [Parameter]
    public string? Text { get; set; }

    private ElementReference _textInputRef;
    private string _textInput = string.Empty;
    private int _maxChars = Consts.MaxInputChars;
    private bool _digitAdderLoading;

    public bool Loading => _digitAdderLoading;

    private async Task OnInputClear(MouseEventArgs mouseEventArgs)
    {
        _textInput = string.Empty;
        await _textInputRef.FocusAsync();

        navigationManager.NavigateTo("./", false, true);
    }

    private void OnInput(string value)
    {
        _textInput = value;

        navigationManager.NavigateTo($"./{value}", false, true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _textInputRef.FocusAsync();

            if (Text is { })
            {
                _textInput = Text;
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
